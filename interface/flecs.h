// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `flecs.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __flecs_h__
#define __flecs_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace FleCS
{

class C2S;

class SM2S;

class Master;

}

}

namespace FleCS
{

class C2S;
bool operator==(const C2S&, const C2S&);
bool operator<(const C2S&, const C2S&);

class SM2S;
bool operator==(const SM2S&, const SM2S&);
bool operator<(const SM2S&, const SM2S&);

class Master;
bool operator==(const Master&, const Master&);
bool operator<(const Master&, const Master&);

}

namespace IceInternal
{

::Ice::Object* upCast(::FleCS::C2S*);
::IceProxy::Ice::Object* upCast(::IceProxy::FleCS::C2S*);

::Ice::Object* upCast(::FleCS::SM2S*);
::IceProxy::Ice::Object* upCast(::IceProxy::FleCS::SM2S*);

::Ice::Object* upCast(::FleCS::Master*);
::IceProxy::Ice::Object* upCast(::IceProxy::FleCS::Master*);

}

namespace FleCS
{

typedef ::IceInternal::Handle< ::FleCS::C2S> C2SPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FleCS::C2S> C2SPrx;

void __read(::IceInternal::BasicStream*, C2SPrx&);
void __patch__C2SPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::FleCS::SM2S> SM2SPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FleCS::SM2S> SM2SPrx;

void __read(::IceInternal::BasicStream*, SM2SPrx&);
void __patch__SM2SPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::FleCS::Master> MasterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FleCS::Master> MasterPrx;

void __read(::IceInternal::BasicStream*, MasterPrx&);
void __patch__MasterPtr(void*, ::Ice::ObjectPtr&);

}

namespace FleCS
{

typedef ::std::vector< ::Ice::Byte> ByteSeq;

typedef ::std::vector< ::std::string> StringSeq;

}

namespace FleCS
{

class Callback_C2S_Get_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_C2S_Get_Base> Callback_C2S_GetPtr;

class Callback_C2S_Put_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_C2S_Put_Base> Callback_C2S_PutPtr;

class Callback_C2S_Append_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_C2S_Append_Base> Callback_C2S_AppendPtr;

class Callback_SM2S_Get_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SM2S_Get_Base> Callback_SM2S_GetPtr;

class Callback_SM2S_Put_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SM2S_Put_Base> Callback_SM2S_PutPtr;

class Callback_SM2S_Append_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SM2S_Append_Base> Callback_SM2S_AppendPtr;

class Callback_SM2S_AcquireLock_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SM2S_AcquireLock_Base> Callback_SM2S_AcquireLockPtr;

class Callback_SM2S_ReleaseLock_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SM2S_ReleaseLock_Base> Callback_SM2S_ReleaseLockPtr;

class Callback_SM2S_ServerJoined_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SM2S_ServerJoined_Base> Callback_SM2S_ServerJoinedPtr;

class Callback_SM2S_ServerLeft_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SM2S_ServerLeft_Base> Callback_SM2S_ServerLeftPtr;

class Callback_Master_Join_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Master_Join_Base> Callback_Master_JoinPtr;

class Callback_Master_GetLockServers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Master_GetLockServers_Base> Callback_Master_GetLockServersPtr;

}

namespace IceProxy
{

namespace FleCS
{

class C2S : virtual public ::IceProxy::Ice::Object
{
public:

    void Get(const ::std::string& bucketID, const ::std::string& objID, ::FleCS::ByteSeq& content)
    {
        Get(bucketID, objID, content, 0);
    }
    void Get(const ::std::string& bucketID, const ::std::string& objID, ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx)
    {
        Get(bucketID, objID, content, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_Get(const ::std::string& bucketID, const ::std::string& objID)
    {
        return begin_Get(bucketID, objID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Get(const ::std::string& bucketID, const ::std::string& objID, const ::Ice::Context& __ctx)
    {
        return begin_Get(bucketID, objID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Get(const ::std::string& bucketID, const ::std::string& objID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Get(bucketID, objID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Get(const ::std::string& bucketID, const ::std::string& objID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Get(bucketID, objID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Get(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::Callback_C2S_GetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Get(bucketID, objID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Get(const ::std::string& bucketID, const ::std::string& objID, const ::Ice::Context& __ctx, const ::FleCS::Callback_C2S_GetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Get(bucketID, objID, &__ctx, __del, __cookie);
    }

    void end_Get(::FleCS::ByteSeq& content, const ::Ice::AsyncResultPtr&);
    
private:

    void Get(const ::std::string&, const ::std::string&, ::FleCS::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Get(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content)
    {
        Put(bucketID, objID, content, 0);
    }
    void Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx)
    {
        Put(bucketID, objID, content, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content)
    {
        return begin_Put(bucketID, objID, content, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx)
    {
        return begin_Put(bucketID, objID, content, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Put(bucketID, objID, content, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Put(bucketID, objID, content, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::FleCS::Callback_C2S_PutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Put(bucketID, objID, content, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx, const ::FleCS::Callback_C2S_PutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Put(bucketID, objID, content, &__ctx, __del, __cookie);
    }

    void end_Put(const ::Ice::AsyncResultPtr&);
    
private:

    void Put(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Put(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content)
    {
        Append(bucketID, objID, content, 0);
    }
    void Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx)
    {
        Append(bucketID, objID, content, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content)
    {
        return begin_Append(bucketID, objID, content, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx)
    {
        return begin_Append(bucketID, objID, content, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Append(bucketID, objID, content, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Append(bucketID, objID, content, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::FleCS::Callback_C2S_AppendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Append(bucketID, objID, content, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx, const ::FleCS::Callback_C2S_AppendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Append(bucketID, objID, content, &__ctx, __del, __cookie);
    }

    void end_Append(const ::Ice::AsyncResultPtr&);
    
private:

    void Append(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Append(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<C2S> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<C2S> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<C2S*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<C2S*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SM2S : virtual public ::IceProxy::Ice::Object
{
public:

    void Get(const ::std::string& bucketID, const ::std::string& objID, ::FleCS::ByteSeq& content)
    {
        Get(bucketID, objID, content, 0);
    }
    void Get(const ::std::string& bucketID, const ::std::string& objID, ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx)
    {
        Get(bucketID, objID, content, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_Get(const ::std::string& bucketID, const ::std::string& objID)
    {
        return begin_Get(bucketID, objID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Get(const ::std::string& bucketID, const ::std::string& objID, const ::Ice::Context& __ctx)
    {
        return begin_Get(bucketID, objID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Get(const ::std::string& bucketID, const ::std::string& objID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Get(bucketID, objID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Get(const ::std::string& bucketID, const ::std::string& objID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Get(bucketID, objID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Get(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::Callback_SM2S_GetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Get(bucketID, objID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Get(const ::std::string& bucketID, const ::std::string& objID, const ::Ice::Context& __ctx, const ::FleCS::Callback_SM2S_GetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Get(bucketID, objID, &__ctx, __del, __cookie);
    }

    void end_Get(::FleCS::ByteSeq& content, const ::Ice::AsyncResultPtr&);
    
private:

    void Get(const ::std::string&, const ::std::string&, ::FleCS::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Get(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content)
    {
        Put(bucketID, objID, content, 0);
    }
    void Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx)
    {
        Put(bucketID, objID, content, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content)
    {
        return begin_Put(bucketID, objID, content, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx)
    {
        return begin_Put(bucketID, objID, content, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Put(bucketID, objID, content, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Put(bucketID, objID, content, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::FleCS::Callback_SM2S_PutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Put(bucketID, objID, content, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx, const ::FleCS::Callback_SM2S_PutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Put(bucketID, objID, content, &__ctx, __del, __cookie);
    }

    void end_Put(const ::Ice::AsyncResultPtr&);
    
private:

    void Put(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Put(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content)
    {
        Append(bucketID, objID, content, 0);
    }
    void Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx)
    {
        Append(bucketID, objID, content, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content)
    {
        return begin_Append(bucketID, objID, content, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx)
    {
        return begin_Append(bucketID, objID, content, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Append(bucketID, objID, content, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Append(bucketID, objID, content, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::FleCS::Callback_SM2S_AppendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Append(bucketID, objID, content, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context& __ctx, const ::FleCS::Callback_SM2S_AppendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Append(bucketID, objID, content, &__ctx, __del, __cookie);
    }

    void end_Append(const ::Ice::AsyncResultPtr&);
    
private:

    void Append(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Append(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void AcquireLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid)
    {
        AcquireLock(lockPath, type, hostname, tid, 0);
    }
    void AcquireLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context& __ctx)
    {
        AcquireLock(lockPath, type, hostname, tid, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_AcquireLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid)
    {
        return begin_AcquireLock(lockPath, type, hostname, tid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AcquireLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context& __ctx)
    {
        return begin_AcquireLock(lockPath, type, hostname, tid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AcquireLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AcquireLock(lockPath, type, hostname, tid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AcquireLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AcquireLock(lockPath, type, hostname, tid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AcquireLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::FleCS::Callback_SM2S_AcquireLockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AcquireLock(lockPath, type, hostname, tid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AcquireLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context& __ctx, const ::FleCS::Callback_SM2S_AcquireLockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AcquireLock(lockPath, type, hostname, tid, &__ctx, __del, __cookie);
    }

    void end_AcquireLock(const ::Ice::AsyncResultPtr&);
    
private:

    void AcquireLock(const ::std::string&, ::Ice::Byte, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_AcquireLock(const ::std::string&, ::Ice::Byte, const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ReleaseLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid)
    {
        ReleaseLock(lockPath, type, hostname, tid, 0);
    }
    void ReleaseLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context& __ctx)
    {
        ReleaseLock(lockPath, type, hostname, tid, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_ReleaseLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid)
    {
        return begin_ReleaseLock(lockPath, type, hostname, tid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReleaseLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context& __ctx)
    {
        return begin_ReleaseLock(lockPath, type, hostname, tid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReleaseLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReleaseLock(lockPath, type, hostname, tid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReleaseLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReleaseLock(lockPath, type, hostname, tid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReleaseLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::FleCS::Callback_SM2S_ReleaseLockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReleaseLock(lockPath, type, hostname, tid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReleaseLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context& __ctx, const ::FleCS::Callback_SM2S_ReleaseLockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReleaseLock(lockPath, type, hostname, tid, &__ctx, __del, __cookie);
    }

    void end_ReleaseLock(const ::Ice::AsyncResultPtr&);
    
private:

    void ReleaseLock(const ::std::string&, ::Ice::Byte, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ReleaseLock(const ::std::string&, ::Ice::Byte, const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ServerJoined(const ::std::string& endpoint)
    {
        ServerJoined(endpoint, 0);
    }
    void ServerJoined(const ::std::string& endpoint, const ::Ice::Context& __ctx)
    {
        ServerJoined(endpoint, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_ServerJoined(const ::std::string& endpoint)
    {
        return begin_ServerJoined(endpoint, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ServerJoined(const ::std::string& endpoint, const ::Ice::Context& __ctx)
    {
        return begin_ServerJoined(endpoint, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ServerJoined(const ::std::string& endpoint, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ServerJoined(endpoint, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ServerJoined(const ::std::string& endpoint, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ServerJoined(endpoint, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ServerJoined(const ::std::string& endpoint, const ::FleCS::Callback_SM2S_ServerJoinedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ServerJoined(endpoint, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ServerJoined(const ::std::string& endpoint, const ::Ice::Context& __ctx, const ::FleCS::Callback_SM2S_ServerJoinedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ServerJoined(endpoint, &__ctx, __del, __cookie);
    }

    void end_ServerJoined(const ::Ice::AsyncResultPtr&);
    
private:

    void ServerJoined(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ServerJoined(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ServerLeft(const ::std::string& endpoint)
    {
        ServerLeft(endpoint, 0);
    }
    void ServerLeft(const ::std::string& endpoint, const ::Ice::Context& __ctx)
    {
        ServerLeft(endpoint, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_ServerLeft(const ::std::string& endpoint)
    {
        return begin_ServerLeft(endpoint, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ServerLeft(const ::std::string& endpoint, const ::Ice::Context& __ctx)
    {
        return begin_ServerLeft(endpoint, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ServerLeft(const ::std::string& endpoint, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ServerLeft(endpoint, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ServerLeft(const ::std::string& endpoint, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ServerLeft(endpoint, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ServerLeft(const ::std::string& endpoint, const ::FleCS::Callback_SM2S_ServerLeftPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ServerLeft(endpoint, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ServerLeft(const ::std::string& endpoint, const ::Ice::Context& __ctx, const ::FleCS::Callback_SM2S_ServerLeftPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ServerLeft(endpoint, &__ctx, __del, __cookie);
    }

    void end_ServerLeft(const ::Ice::AsyncResultPtr&);
    
private:

    void ServerLeft(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ServerLeft(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SM2S> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SM2S> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SM2S*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<SM2S*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Master : virtual public ::IceProxy::Ice::Object
{
public:

    void Join(const ::std::string& endpoint, ::FleCS::StringSeq& existingServers)
    {
        Join(endpoint, existingServers, 0);
    }
    void Join(const ::std::string& endpoint, ::FleCS::StringSeq& existingServers, const ::Ice::Context& __ctx)
    {
        Join(endpoint, existingServers, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_Join(const ::std::string& endpoint)
    {
        return begin_Join(endpoint, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Join(const ::std::string& endpoint, const ::Ice::Context& __ctx)
    {
        return begin_Join(endpoint, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Join(const ::std::string& endpoint, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Join(endpoint, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Join(const ::std::string& endpoint, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Join(endpoint, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Join(const ::std::string& endpoint, const ::FleCS::Callback_Master_JoinPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Join(endpoint, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Join(const ::std::string& endpoint, const ::Ice::Context& __ctx, const ::FleCS::Callback_Master_JoinPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Join(endpoint, &__ctx, __del, __cookie);
    }

    void end_Join(::FleCS::StringSeq& existingServers, const ::Ice::AsyncResultPtr&);
    
private:

    void Join(const ::std::string&, ::FleCS::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Join(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::FleCS::StringSeq GetLockServers()
    {
        return GetLockServers(0);
    }
    ::FleCS::StringSeq GetLockServers(const ::Ice::Context& __ctx)
    {
        return GetLockServers(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetLockServers()
    {
        return begin_GetLockServers(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetLockServers(const ::Ice::Context& __ctx)
    {
        return begin_GetLockServers(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetLockServers(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLockServers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLockServers(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLockServers(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLockServers(const ::FleCS::Callback_Master_GetLockServersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLockServers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLockServers(const ::Ice::Context& __ctx, const ::FleCS::Callback_Master_GetLockServersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLockServers(&__ctx, __del, __cookie);
    }

    ::FleCS::StringSeq end_GetLockServers(const ::Ice::AsyncResultPtr&);
    
private:

    ::FleCS::StringSeq GetLockServers(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetLockServers(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Master> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Master> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Master*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Master*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace FleCS
{

class C2S : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void Get(const ::std::string&, const ::std::string&, ::FleCS::ByteSeq&, const ::Ice::Context*) = 0;

    virtual void Put(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*) = 0;

    virtual void Append(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*) = 0;
};

class SM2S : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void Get(const ::std::string&, const ::std::string&, ::FleCS::ByteSeq&, const ::Ice::Context*) = 0;

    virtual void Put(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*) = 0;

    virtual void Append(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*) = 0;

    virtual void AcquireLock(const ::std::string&, ::Ice::Byte, const ::std::string&, ::Ice::Long, const ::Ice::Context*) = 0;

    virtual void ReleaseLock(const ::std::string&, ::Ice::Byte, const ::std::string&, ::Ice::Long, const ::Ice::Context*) = 0;

    virtual void ServerJoined(const ::std::string&, const ::Ice::Context*) = 0;

    virtual void ServerLeft(const ::std::string&, const ::Ice::Context*) = 0;
};

class Master : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void Join(const ::std::string&, ::FleCS::StringSeq&, const ::Ice::Context*) = 0;

    virtual ::FleCS::StringSeq GetLockServers(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace FleCS
{

class C2S : virtual public ::IceDelegate::FleCS::C2S,
            virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void Get(const ::std::string&, const ::std::string&, ::FleCS::ByteSeq&, const ::Ice::Context*);

    virtual void Put(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*);

    virtual void Append(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*);
};

class SM2S : virtual public ::IceDelegate::FleCS::SM2S,
             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void Get(const ::std::string&, const ::std::string&, ::FleCS::ByteSeq&, const ::Ice::Context*);

    virtual void Put(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*);

    virtual void Append(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*);

    virtual void AcquireLock(const ::std::string&, ::Ice::Byte, const ::std::string&, ::Ice::Long, const ::Ice::Context*);

    virtual void ReleaseLock(const ::std::string&, ::Ice::Byte, const ::std::string&, ::Ice::Long, const ::Ice::Context*);

    virtual void ServerJoined(const ::std::string&, const ::Ice::Context*);

    virtual void ServerLeft(const ::std::string&, const ::Ice::Context*);
};

class Master : virtual public ::IceDelegate::FleCS::Master,
               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void Join(const ::std::string&, ::FleCS::StringSeq&, const ::Ice::Context*);

    virtual ::FleCS::StringSeq GetLockServers(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace FleCS
{

class C2S : virtual public ::IceDelegate::FleCS::C2S,
            virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void Get(const ::std::string&, const ::std::string&, ::FleCS::ByteSeq&, const ::Ice::Context*);

    virtual void Put(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*);

    virtual void Append(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*);
};

class SM2S : virtual public ::IceDelegate::FleCS::SM2S,
             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void Get(const ::std::string&, const ::std::string&, ::FleCS::ByteSeq&, const ::Ice::Context*);

    virtual void Put(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*);

    virtual void Append(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Context*);

    virtual void AcquireLock(const ::std::string&, ::Ice::Byte, const ::std::string&, ::Ice::Long, const ::Ice::Context*);

    virtual void ReleaseLock(const ::std::string&, ::Ice::Byte, const ::std::string&, ::Ice::Long, const ::Ice::Context*);

    virtual void ServerJoined(const ::std::string&, const ::Ice::Context*);

    virtual void ServerLeft(const ::std::string&, const ::Ice::Context*);
};

class Master : virtual public ::IceDelegate::FleCS::Master,
               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void Join(const ::std::string&, ::FleCS::StringSeq&, const ::Ice::Context*);

    virtual ::FleCS::StringSeq GetLockServers(const ::Ice::Context*);
};

}

}

namespace FleCS
{

class C2S : virtual public ::Ice::Object
{
public:

    typedef C2SPrx ProxyType;
    typedef C2SPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void Get(const ::std::string&, const ::std::string&, ::FleCS::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Get(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void Put(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Put(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void Append(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Append(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const C2S& l, const C2S& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const C2S& l, const C2S& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class SM2S : virtual public ::Ice::Object
{
public:

    typedef SM2SPrx ProxyType;
    typedef SM2SPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void Get(const ::std::string&, const ::std::string&, ::FleCS::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Get(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void Put(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Put(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void Append(const ::std::string&, const ::std::string&, const ::FleCS::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Append(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void AcquireLock(const ::std::string&, ::Ice::Byte, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___AcquireLock(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ReleaseLock(const ::std::string&, ::Ice::Byte, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ReleaseLock(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ServerJoined(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ServerJoined(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ServerLeft(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ServerLeft(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const SM2S& l, const SM2S& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SM2S& l, const SM2S& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Master : virtual public ::Ice::Object
{
public:

    typedef MasterPrx ProxyType;
    typedef MasterPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void Join(const ::std::string&, ::FleCS::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Join(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::FleCS::StringSeq GetLockServers(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetLockServers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const Master& l, const Master& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Master& l, const Master& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace FleCS
{

template<class T>
class CallbackNC_C2S_Get : public Callback_C2S_Get_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::FleCS::ByteSeq&);

    CallbackNC_C2S_Get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FleCS::C2SPrx __proxy = ::FleCS::C2SPrx::uncheckedCast(__result->getProxy());
        ::FleCS::ByteSeq content;
        try
        {
            __proxy->end_Get(content, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(content);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(content);
#endif
        }
    }

    Response response;
};

template<class T> Callback_C2S_GetPtr
newCallback_C2S_Get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FleCS::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_C2S_Get<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_C2S_GetPtr
newCallback_C2S_Get(T* instance, void (T::*cb)(const ::FleCS::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_C2S_Get<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_C2S_Get : public Callback_C2S_Get_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::FleCS::ByteSeq&, const CT&);

    Callback_C2S_Get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FleCS::C2SPrx __proxy = ::FleCS::C2SPrx::uncheckedCast(__result->getProxy());
        ::FleCS::ByteSeq content;
        try
        {
            __proxy->end_Get(content, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(content, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(content, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_C2S_GetPtr
newCallback_C2S_Get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FleCS::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_C2S_Get<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_C2S_GetPtr
newCallback_C2S_Get(T* instance, void (T::*cb)(const ::FleCS::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_C2S_Get<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_C2S_Put : public Callback_C2S_Put_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_C2S_Put(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_C2S_PutPtr
newCallback_C2S_Put(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_C2S_Put<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_C2S_PutPtr
newCallback_C2S_Put(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_C2S_Put<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_C2S_PutPtr
newCallback_C2S_Put(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_C2S_Put<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_C2S_PutPtr
newCallback_C2S_Put(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_C2S_Put<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_C2S_Put : public Callback_C2S_Put_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_C2S_Put(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_C2S_PutPtr
newCallback_C2S_Put(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_C2S_Put<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_C2S_PutPtr
newCallback_C2S_Put(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_C2S_Put<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_C2S_PutPtr
newCallback_C2S_Put(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_C2S_Put<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_C2S_PutPtr
newCallback_C2S_Put(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_C2S_Put<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_C2S_Append : public Callback_C2S_Append_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_C2S_Append(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_C2S_AppendPtr
newCallback_C2S_Append(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_C2S_Append<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_C2S_AppendPtr
newCallback_C2S_Append(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_C2S_Append<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_C2S_AppendPtr
newCallback_C2S_Append(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_C2S_Append<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_C2S_AppendPtr
newCallback_C2S_Append(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_C2S_Append<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_C2S_Append : public Callback_C2S_Append_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_C2S_Append(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_C2S_AppendPtr
newCallback_C2S_Append(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_C2S_Append<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_C2S_AppendPtr
newCallback_C2S_Append(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_C2S_Append<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_C2S_AppendPtr
newCallback_C2S_Append(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_C2S_Append<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_C2S_AppendPtr
newCallback_C2S_Append(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_C2S_Append<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SM2S_Get : public Callback_SM2S_Get_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::FleCS::ByteSeq&);

    CallbackNC_SM2S_Get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FleCS::SM2SPrx __proxy = ::FleCS::SM2SPrx::uncheckedCast(__result->getProxy());
        ::FleCS::ByteSeq content;
        try
        {
            __proxy->end_Get(content, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(content);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(content);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SM2S_GetPtr
newCallback_SM2S_Get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FleCS::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_Get<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_GetPtr
newCallback_SM2S_Get(T* instance, void (T::*cb)(const ::FleCS::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_Get<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SM2S_Get : public Callback_SM2S_Get_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::FleCS::ByteSeq&, const CT&);

    Callback_SM2S_Get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FleCS::SM2SPrx __proxy = ::FleCS::SM2SPrx::uncheckedCast(__result->getProxy());
        ::FleCS::ByteSeq content;
        try
        {
            __proxy->end_Get(content, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(content, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(content, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SM2S_GetPtr
newCallback_SM2S_Get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FleCS::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_Get<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_GetPtr
newCallback_SM2S_Get(T* instance, void (T::*cb)(const ::FleCS::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_Get<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SM2S_Put : public Callback_SM2S_Put_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SM2S_Put(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SM2S_PutPtr
newCallback_SM2S_Put(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_Put<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_PutPtr
newCallback_SM2S_Put(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_Put<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SM2S_PutPtr
newCallback_SM2S_Put(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_Put<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_PutPtr
newCallback_SM2S_Put(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_Put<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SM2S_Put : public Callback_SM2S_Put_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SM2S_Put(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SM2S_PutPtr
newCallback_SM2S_Put(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_Put<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_PutPtr
newCallback_SM2S_Put(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_Put<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_PutPtr
newCallback_SM2S_Put(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_Put<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_PutPtr
newCallback_SM2S_Put(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_Put<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SM2S_Append : public Callback_SM2S_Append_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SM2S_Append(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SM2S_AppendPtr
newCallback_SM2S_Append(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_Append<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_AppendPtr
newCallback_SM2S_Append(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_Append<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SM2S_AppendPtr
newCallback_SM2S_Append(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_Append<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_AppendPtr
newCallback_SM2S_Append(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_Append<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SM2S_Append : public Callback_SM2S_Append_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SM2S_Append(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SM2S_AppendPtr
newCallback_SM2S_Append(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_Append<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_AppendPtr
newCallback_SM2S_Append(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_Append<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_AppendPtr
newCallback_SM2S_Append(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_Append<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_AppendPtr
newCallback_SM2S_Append(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_Append<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SM2S_AcquireLock : public Callback_SM2S_AcquireLock_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SM2S_AcquireLock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SM2S_AcquireLockPtr
newCallback_SM2S_AcquireLock(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_AcquireLock<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_AcquireLockPtr
newCallback_SM2S_AcquireLock(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_AcquireLock<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SM2S_AcquireLockPtr
newCallback_SM2S_AcquireLock(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_AcquireLock<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_AcquireLockPtr
newCallback_SM2S_AcquireLock(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_AcquireLock<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SM2S_AcquireLock : public Callback_SM2S_AcquireLock_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SM2S_AcquireLock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SM2S_AcquireLockPtr
newCallback_SM2S_AcquireLock(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_AcquireLock<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_AcquireLockPtr
newCallback_SM2S_AcquireLock(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_AcquireLock<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_AcquireLockPtr
newCallback_SM2S_AcquireLock(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_AcquireLock<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_AcquireLockPtr
newCallback_SM2S_AcquireLock(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_AcquireLock<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SM2S_ReleaseLock : public Callback_SM2S_ReleaseLock_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SM2S_ReleaseLock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SM2S_ReleaseLockPtr
newCallback_SM2S_ReleaseLock(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_ReleaseLock<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_ReleaseLockPtr
newCallback_SM2S_ReleaseLock(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_ReleaseLock<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SM2S_ReleaseLockPtr
newCallback_SM2S_ReleaseLock(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_ReleaseLock<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_ReleaseLockPtr
newCallback_SM2S_ReleaseLock(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_ReleaseLock<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SM2S_ReleaseLock : public Callback_SM2S_ReleaseLock_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SM2S_ReleaseLock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SM2S_ReleaseLockPtr
newCallback_SM2S_ReleaseLock(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_ReleaseLock<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_ReleaseLockPtr
newCallback_SM2S_ReleaseLock(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_ReleaseLock<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_ReleaseLockPtr
newCallback_SM2S_ReleaseLock(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_ReleaseLock<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_ReleaseLockPtr
newCallback_SM2S_ReleaseLock(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_ReleaseLock<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SM2S_ServerJoined : public Callback_SM2S_ServerJoined_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SM2S_ServerJoined(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SM2S_ServerJoinedPtr
newCallback_SM2S_ServerJoined(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_ServerJoined<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_ServerJoinedPtr
newCallback_SM2S_ServerJoined(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_ServerJoined<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SM2S_ServerJoinedPtr
newCallback_SM2S_ServerJoined(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_ServerJoined<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_ServerJoinedPtr
newCallback_SM2S_ServerJoined(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_ServerJoined<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SM2S_ServerJoined : public Callback_SM2S_ServerJoined_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SM2S_ServerJoined(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SM2S_ServerJoinedPtr
newCallback_SM2S_ServerJoined(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_ServerJoined<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_ServerJoinedPtr
newCallback_SM2S_ServerJoined(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_ServerJoined<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_ServerJoinedPtr
newCallback_SM2S_ServerJoined(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_ServerJoined<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_ServerJoinedPtr
newCallback_SM2S_ServerJoined(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_ServerJoined<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SM2S_ServerLeft : public Callback_SM2S_ServerLeft_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SM2S_ServerLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SM2S_ServerLeftPtr
newCallback_SM2S_ServerLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_ServerLeft<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_ServerLeftPtr
newCallback_SM2S_ServerLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_ServerLeft<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SM2S_ServerLeftPtr
newCallback_SM2S_ServerLeft(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_ServerLeft<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SM2S_ServerLeftPtr
newCallback_SM2S_ServerLeft(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SM2S_ServerLeft<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SM2S_ServerLeft : public Callback_SM2S_ServerLeft_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SM2S_ServerLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SM2S_ServerLeftPtr
newCallback_SM2S_ServerLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_ServerLeft<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_ServerLeftPtr
newCallback_SM2S_ServerLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_ServerLeft<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_ServerLeftPtr
newCallback_SM2S_ServerLeft(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_ServerLeft<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SM2S_ServerLeftPtr
newCallback_SM2S_ServerLeft(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SM2S_ServerLeft<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Master_Join : public Callback_Master_Join_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::FleCS::StringSeq&);

    CallbackNC_Master_Join(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FleCS::MasterPrx __proxy = ::FleCS::MasterPrx::uncheckedCast(__result->getProxy());
        ::FleCS::StringSeq existingServers;
        try
        {
            __proxy->end_Join(existingServers, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(existingServers);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(existingServers);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Master_JoinPtr
newCallback_Master_Join(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FleCS::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Master_Join<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Master_JoinPtr
newCallback_Master_Join(T* instance, void (T::*cb)(const ::FleCS::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Master_Join<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Master_Join : public Callback_Master_Join_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::FleCS::StringSeq&, const CT&);

    Callback_Master_Join(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FleCS::MasterPrx __proxy = ::FleCS::MasterPrx::uncheckedCast(__result->getProxy());
        ::FleCS::StringSeq existingServers;
        try
        {
            __proxy->end_Join(existingServers, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(existingServers, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(existingServers, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Master_JoinPtr
newCallback_Master_Join(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FleCS::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Master_Join<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Master_JoinPtr
newCallback_Master_Join(T* instance, void (T::*cb)(const ::FleCS::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Master_Join<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Master_GetLockServers : public Callback_Master_GetLockServers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::FleCS::StringSeq&);

    CallbackNC_Master_GetLockServers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FleCS::MasterPrx __proxy = ::FleCS::MasterPrx::uncheckedCast(__result->getProxy());
        ::FleCS::StringSeq __ret;
        try
        {
            __ret = __proxy->end_GetLockServers(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Master_GetLockServersPtr
newCallback_Master_GetLockServers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FleCS::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Master_GetLockServers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Master_GetLockServersPtr
newCallback_Master_GetLockServers(T* instance, void (T::*cb)(const ::FleCS::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Master_GetLockServers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Master_GetLockServers : public Callback_Master_GetLockServers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::FleCS::StringSeq&, const CT&);

    Callback_Master_GetLockServers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FleCS::MasterPrx __proxy = ::FleCS::MasterPrx::uncheckedCast(__result->getProxy());
        ::FleCS::StringSeq __ret;
        try
        {
            __ret = __proxy->end_GetLockServers(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Master_GetLockServersPtr
newCallback_Master_GetLockServers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FleCS::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Master_GetLockServers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Master_GetLockServersPtr
newCallback_Master_GetLockServers(T* instance, void (T::*cb)(const ::FleCS::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Master_GetLockServers<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
