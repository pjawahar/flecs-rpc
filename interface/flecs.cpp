// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `flecs.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <flecs.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __FleCS__C2S__Get_name = "Get";

static const ::std::string __FleCS__C2S__Put_name = "Put";

static const ::std::string __FleCS__C2S__Append_name = "Append";

static const ::std::string __FleCS__SM2S__Get_name = "Get";

static const ::std::string __FleCS__SM2S__Put_name = "Put";

static const ::std::string __FleCS__SM2S__Append_name = "Append";

static const ::std::string __FleCS__SM2S__AcquireLock_name = "AcquireLock";

static const ::std::string __FleCS__SM2S__ReleaseLock_name = "ReleaseLock";

static const ::std::string __FleCS__SM2S__ServerJoined_name = "ServerJoined";

static const ::std::string __FleCS__SM2S__ServerLeft_name = "ServerLeft";

static const ::std::string __FleCS__Master__Join_name = "Join";

static const ::std::string __FleCS__Master__GetLockServers_name = "GetLockServers";

::Ice::Object* IceInternal::upCast(::FleCS::C2S* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::FleCS::C2S* p) { return p; }

::Ice::Object* IceInternal::upCast(::FleCS::SM2S* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::FleCS::SM2S* p) { return p; }

::Ice::Object* IceInternal::upCast(::FleCS::Master* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::FleCS::Master* p) { return p; }

void
FleCS::__read(::IceInternal::BasicStream* __is, ::FleCS::C2SPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::FleCS::C2S;
        v->__copyFrom(proxy);
    }
}

void
FleCS::__read(::IceInternal::BasicStream* __is, ::FleCS::SM2SPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::FleCS::SM2S;
        v->__copyFrom(proxy);
    }
}

void
FleCS::__read(::IceInternal::BasicStream* __is, ::FleCS::MasterPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::FleCS::Master;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::FleCS::C2S::Get(const ::std::string& bucketID, const ::std::string& objID, ::FleCS::ByteSeq& content, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__FleCS__C2S__Get_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::FleCS::C2S* __del = dynamic_cast< ::IceDelegate::FleCS::C2S*>(__delBase.get());
            __del->Get(bucketID, objID, content, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FleCS::C2S::begin_Get(const ::std::string& bucketID, const ::std::string& objID, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__FleCS__C2S__Get_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FleCS__C2S__Get_name, __del, __cookie);
    try
    {
        __result->__prepare(__FleCS__C2S__Get_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(bucketID);
        __os->write(objID);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FleCS::C2S::end_Get(::FleCS::ByteSeq& content, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __FleCS__C2S__Get_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___content;
    __is->read(___content);
    ::std::vector< ::Ice::Byte>(___content.first, ___content.second).swap(content);
    __is->endReadEncaps();
}

void
IceProxy::FleCS::C2S::Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FleCS::C2S* __del = dynamic_cast< ::IceDelegate::FleCS::C2S*>(__delBase.get());
            __del->Put(bucketID, objID, content, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FleCS::C2S::begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FleCS__C2S__Put_name, __del, __cookie);
    try
    {
        __result->__prepare(__FleCS__C2S__Put_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(bucketID);
        __os->write(objID);
        if(content.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&content[0], &content[0] + content.size());
        }
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FleCS::C2S::end_Put(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FleCS__C2S__Put_name);
}

void
IceProxy::FleCS::C2S::Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FleCS::C2S* __del = dynamic_cast< ::IceDelegate::FleCS::C2S*>(__delBase.get());
            __del->Append(bucketID, objID, content, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FleCS::C2S::begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FleCS__C2S__Append_name, __del, __cookie);
    try
    {
        __result->__prepare(__FleCS__C2S__Append_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(bucketID);
        __os->write(objID);
        if(content.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&content[0], &content[0] + content.size());
        }
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FleCS::C2S::end_Append(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FleCS__C2S__Append_name);
}

const ::std::string&
IceProxy::FleCS::C2S::ice_staticId()
{
    return ::FleCS::C2S::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::FleCS::C2S::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::FleCS::C2S);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::FleCS::C2S::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::FleCS::C2S);
}

::IceProxy::Ice::Object*
IceProxy::FleCS::C2S::__newInstance() const
{
    return new C2S;
}

void
IceProxy::FleCS::SM2S::Get(const ::std::string& bucketID, const ::std::string& objID, ::FleCS::ByteSeq& content, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__FleCS__SM2S__Get_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::FleCS::SM2S* __del = dynamic_cast< ::IceDelegate::FleCS::SM2S*>(__delBase.get());
            __del->Get(bucketID, objID, content, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FleCS::SM2S::begin_Get(const ::std::string& bucketID, const ::std::string& objID, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__FleCS__SM2S__Get_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FleCS__SM2S__Get_name, __del, __cookie);
    try
    {
        __result->__prepare(__FleCS__SM2S__Get_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(bucketID);
        __os->write(objID);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FleCS::SM2S::end_Get(::FleCS::ByteSeq& content, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __FleCS__SM2S__Get_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___content;
    __is->read(___content);
    ::std::vector< ::Ice::Byte>(___content.first, ___content.second).swap(content);
    __is->endReadEncaps();
}

void
IceProxy::FleCS::SM2S::Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FleCS::SM2S* __del = dynamic_cast< ::IceDelegate::FleCS::SM2S*>(__delBase.get());
            __del->Put(bucketID, objID, content, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FleCS::SM2S::begin_Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FleCS__SM2S__Put_name, __del, __cookie);
    try
    {
        __result->__prepare(__FleCS__SM2S__Put_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(bucketID);
        __os->write(objID);
        if(content.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&content[0], &content[0] + content.size());
        }
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FleCS::SM2S::end_Put(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FleCS__SM2S__Put_name);
}

void
IceProxy::FleCS::SM2S::Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FleCS::SM2S* __del = dynamic_cast< ::IceDelegate::FleCS::SM2S*>(__delBase.get());
            __del->Append(bucketID, objID, content, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FleCS::SM2S::begin_Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FleCS__SM2S__Append_name, __del, __cookie);
    try
    {
        __result->__prepare(__FleCS__SM2S__Append_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(bucketID);
        __os->write(objID);
        if(content.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&content[0], &content[0] + content.size());
        }
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FleCS::SM2S::end_Append(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FleCS__SM2S__Append_name);
}

void
IceProxy::FleCS::SM2S::AcquireLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FleCS::SM2S* __del = dynamic_cast< ::IceDelegate::FleCS::SM2S*>(__delBase.get());
            __del->AcquireLock(lockPath, type, hostname, tid, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FleCS::SM2S::begin_AcquireLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FleCS__SM2S__AcquireLock_name, __del, __cookie);
    try
    {
        __result->__prepare(__FleCS__SM2S__AcquireLock_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(lockPath);
        __os->write(type);
        __os->write(hostname);
        __os->write(tid);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FleCS::SM2S::end_AcquireLock(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FleCS__SM2S__AcquireLock_name);
}

void
IceProxy::FleCS::SM2S::ReleaseLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FleCS::SM2S* __del = dynamic_cast< ::IceDelegate::FleCS::SM2S*>(__delBase.get());
            __del->ReleaseLock(lockPath, type, hostname, tid, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FleCS::SM2S::begin_ReleaseLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FleCS__SM2S__ReleaseLock_name, __del, __cookie);
    try
    {
        __result->__prepare(__FleCS__SM2S__ReleaseLock_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(lockPath);
        __os->write(type);
        __os->write(hostname);
        __os->write(tid);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FleCS::SM2S::end_ReleaseLock(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FleCS__SM2S__ReleaseLock_name);
}

void
IceProxy::FleCS::SM2S::ServerJoined(const ::std::string& endpoint, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FleCS::SM2S* __del = dynamic_cast< ::IceDelegate::FleCS::SM2S*>(__delBase.get());
            __del->ServerJoined(endpoint, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FleCS::SM2S::begin_ServerJoined(const ::std::string& endpoint, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FleCS__SM2S__ServerJoined_name, __del, __cookie);
    try
    {
        __result->__prepare(__FleCS__SM2S__ServerJoined_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(endpoint);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FleCS::SM2S::end_ServerJoined(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FleCS__SM2S__ServerJoined_name);
}

void
IceProxy::FleCS::SM2S::ServerLeft(const ::std::string& endpoint, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::FleCS::SM2S* __del = dynamic_cast< ::IceDelegate::FleCS::SM2S*>(__delBase.get());
            __del->ServerLeft(endpoint, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FleCS::SM2S::begin_ServerLeft(const ::std::string& endpoint, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FleCS__SM2S__ServerLeft_name, __del, __cookie);
    try
    {
        __result->__prepare(__FleCS__SM2S__ServerLeft_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(endpoint);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FleCS::SM2S::end_ServerLeft(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __FleCS__SM2S__ServerLeft_name);
}

const ::std::string&
IceProxy::FleCS::SM2S::ice_staticId()
{
    return ::FleCS::SM2S::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::FleCS::SM2S::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::FleCS::SM2S);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::FleCS::SM2S::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::FleCS::SM2S);
}

::IceProxy::Ice::Object*
IceProxy::FleCS::SM2S::__newInstance() const
{
    return new SM2S;
}

void
IceProxy::FleCS::Master::Join(const ::std::string& endpoint, ::FleCS::StringSeq& existingServers, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__FleCS__Master__Join_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::FleCS::Master* __del = dynamic_cast< ::IceDelegate::FleCS::Master*>(__delBase.get());
            __del->Join(endpoint, existingServers, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FleCS::Master::begin_Join(const ::std::string& endpoint, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__FleCS__Master__Join_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FleCS__Master__Join_name, __del, __cookie);
    try
    {
        __result->__prepare(__FleCS__Master__Join_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(endpoint);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::FleCS::Master::end_Join(::FleCS::StringSeq& existingServers, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __FleCS__Master__Join_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(existingServers);
    __is->endReadEncaps();
}

::FleCS::StringSeq
IceProxy::FleCS::Master::GetLockServers(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__FleCS__Master__GetLockServers_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::FleCS::Master* __del = dynamic_cast< ::IceDelegate::FleCS::Master*>(__delBase.get());
            return __del->GetLockServers(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::FleCS::Master::begin_GetLockServers(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__FleCS__Master__GetLockServers_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __FleCS__Master__GetLockServers_name, __del, __cookie);
    try
    {
        __result->__prepare(__FleCS__Master__GetLockServers_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::FleCS::StringSeq
IceProxy::FleCS::Master::end_GetLockServers(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __FleCS__Master__GetLockServers_name);
    ::FleCS::StringSeq __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

const ::std::string&
IceProxy::FleCS::Master::ice_staticId()
{
    return ::FleCS::Master::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::FleCS::Master::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::FleCS::Master);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::FleCS::Master::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::FleCS::Master);
}

::IceProxy::Ice::Object*
IceProxy::FleCS::Master::__newInstance() const
{
    return new Master;
}

void
IceDelegateM::FleCS::C2S::Get(const ::std::string& bucketID, const ::std::string& objID, ::FleCS::ByteSeq& content, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FleCS__C2S__Get_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(bucketID);
        __os->write(objID);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___content;
        __is->read(___content);
        ::std::vector< ::Ice::Byte>(___content.first, ___content.second).swap(content);
        __is->endReadEncaps();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::FleCS::C2S::Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FleCS__C2S__Put_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(bucketID);
        __os->write(objID);
        if(content.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&content[0], &content[0] + content.size());
        }
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::FleCS::C2S::Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FleCS__C2S__Append_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(bucketID);
        __os->write(objID);
        if(content.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&content[0], &content[0] + content.size());
        }
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::FleCS::SM2S::Get(const ::std::string& bucketID, const ::std::string& objID, ::FleCS::ByteSeq& content, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FleCS__SM2S__Get_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(bucketID);
        __os->write(objID);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___content;
        __is->read(___content);
        ::std::vector< ::Ice::Byte>(___content.first, ___content.second).swap(content);
        __is->endReadEncaps();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::FleCS::SM2S::Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FleCS__SM2S__Put_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(bucketID);
        __os->write(objID);
        if(content.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&content[0], &content[0] + content.size());
        }
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::FleCS::SM2S::Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FleCS__SM2S__Append_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(bucketID);
        __os->write(objID);
        if(content.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&content[0], &content[0] + content.size());
        }
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::FleCS::SM2S::AcquireLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FleCS__SM2S__AcquireLock_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(lockPath);
        __os->write(type);
        __os->write(hostname);
        __os->write(tid);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::FleCS::SM2S::ReleaseLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FleCS__SM2S__ReleaseLock_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(lockPath);
        __os->write(type);
        __os->write(hostname);
        __os->write(tid);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::FleCS::SM2S::ServerJoined(const ::std::string& endpoint, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FleCS__SM2S__ServerJoined_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(endpoint);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::FleCS::SM2S::ServerLeft(const ::std::string& endpoint, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FleCS__SM2S__ServerLeft_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(endpoint);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::FleCS::Master::Join(const ::std::string& endpoint, ::FleCS::StringSeq& existingServers, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FleCS__Master__Join_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(endpoint);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(existingServers);
        __is->endReadEncaps();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::FleCS::StringSeq
IceDelegateM::FleCS::Master::GetLockServers(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __FleCS__Master__GetLockServers_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::FleCS::StringSeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::FleCS::C2S::Get(const ::std::string& bucketID, const ::std::string& objID, ::FleCS::ByteSeq& content, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& bucketID, const ::std::string& objID, ::FleCS::ByteSeq& content, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_bucketID(bucketID),
            _m_objID(objID),
            _m_content(content)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FleCS::C2S* servant = dynamic_cast< ::FleCS::C2S*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->Get(_m_bucketID, _m_objID, _m_content, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_bucketID;
        const ::std::string& _m_objID;
        ::FleCS::ByteSeq& _m_content;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FleCS__C2S__Get_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(bucketID, objID, content, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FleCS::C2S::Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_bucketID(bucketID),
            _m_objID(objID),
            _m_content(content)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FleCS::C2S* servant = dynamic_cast< ::FleCS::C2S*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->Put(_m_bucketID, _m_objID, _m_content, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_bucketID;
        const ::std::string& _m_objID;
        const ::FleCS::ByteSeq& _m_content;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FleCS__C2S__Put_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(bucketID, objID, content, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FleCS::C2S::Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_bucketID(bucketID),
            _m_objID(objID),
            _m_content(content)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FleCS::C2S* servant = dynamic_cast< ::FleCS::C2S*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->Append(_m_bucketID, _m_objID, _m_content, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_bucketID;
        const ::std::string& _m_objID;
        const ::FleCS::ByteSeq& _m_content;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FleCS__C2S__Append_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(bucketID, objID, content, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FleCS::SM2S::Get(const ::std::string& bucketID, const ::std::string& objID, ::FleCS::ByteSeq& content, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& bucketID, const ::std::string& objID, ::FleCS::ByteSeq& content, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_bucketID(bucketID),
            _m_objID(objID),
            _m_content(content)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FleCS::SM2S* servant = dynamic_cast< ::FleCS::SM2S*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->Get(_m_bucketID, _m_objID, _m_content, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_bucketID;
        const ::std::string& _m_objID;
        ::FleCS::ByteSeq& _m_content;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FleCS__SM2S__Get_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(bucketID, objID, content, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FleCS::SM2S::Put(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_bucketID(bucketID),
            _m_objID(objID),
            _m_content(content)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FleCS::SM2S* servant = dynamic_cast< ::FleCS::SM2S*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->Put(_m_bucketID, _m_objID, _m_content, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_bucketID;
        const ::std::string& _m_objID;
        const ::FleCS::ByteSeq& _m_content;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FleCS__SM2S__Put_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(bucketID, objID, content, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FleCS::SM2S::Append(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& bucketID, const ::std::string& objID, const ::FleCS::ByteSeq& content, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_bucketID(bucketID),
            _m_objID(objID),
            _m_content(content)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FleCS::SM2S* servant = dynamic_cast< ::FleCS::SM2S*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->Append(_m_bucketID, _m_objID, _m_content, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_bucketID;
        const ::std::string& _m_objID;
        const ::FleCS::ByteSeq& _m_content;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FleCS__SM2S__Append_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(bucketID, objID, content, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FleCS::SM2S::AcquireLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_lockPath(lockPath),
            _m_type(type),
            _m_hostname(hostname),
            _m_tid(tid)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FleCS::SM2S* servant = dynamic_cast< ::FleCS::SM2S*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->AcquireLock(_m_lockPath, _m_type, _m_hostname, _m_tid, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_lockPath;
        ::Ice::Byte _m_type;
        const ::std::string& _m_hostname;
        ::Ice::Long _m_tid;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FleCS__SM2S__AcquireLock_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(lockPath, type, hostname, tid, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FleCS::SM2S::ReleaseLock(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& lockPath, ::Ice::Byte type, const ::std::string& hostname, ::Ice::Long tid, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_lockPath(lockPath),
            _m_type(type),
            _m_hostname(hostname),
            _m_tid(tid)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FleCS::SM2S* servant = dynamic_cast< ::FleCS::SM2S*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->ReleaseLock(_m_lockPath, _m_type, _m_hostname, _m_tid, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_lockPath;
        ::Ice::Byte _m_type;
        const ::std::string& _m_hostname;
        ::Ice::Long _m_tid;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FleCS__SM2S__ReleaseLock_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(lockPath, type, hostname, tid, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FleCS::SM2S::ServerJoined(const ::std::string& endpoint, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& endpoint, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_endpoint(endpoint)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FleCS::SM2S* servant = dynamic_cast< ::FleCS::SM2S*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->ServerJoined(_m_endpoint, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_endpoint;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FleCS__SM2S__ServerJoined_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(endpoint, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FleCS::SM2S::ServerLeft(const ::std::string& endpoint, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& endpoint, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_endpoint(endpoint)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FleCS::SM2S* servant = dynamic_cast< ::FleCS::SM2S*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->ServerLeft(_m_endpoint, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_endpoint;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FleCS__SM2S__ServerLeft_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(endpoint, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::FleCS::Master::Join(const ::std::string& endpoint, ::FleCS::StringSeq& existingServers, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& endpoint, ::FleCS::StringSeq& existingServers, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_endpoint(endpoint),
            _m_existingServers(existingServers)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FleCS::Master* servant = dynamic_cast< ::FleCS::Master*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->Join(_m_endpoint, _m_existingServers, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_endpoint;
        ::FleCS::StringSeq& _m_existingServers;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FleCS__Master__Join_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(endpoint, existingServers, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::FleCS::StringSeq
IceDelegateD::FleCS::Master::GetLockServers(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::FleCS::StringSeq& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::FleCS::Master* servant = dynamic_cast< ::FleCS::Master*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->GetLockServers(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::FleCS::StringSeq& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __FleCS__Master__GetLockServers_name, ::Ice::Normal, __context);
    ::FleCS::StringSeq __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ObjectPtr
FleCS::C2S::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __FleCS__C2S_ids[2] =
{
    "::FleCS::C2S",
    "::Ice::Object"
};

bool
FleCS::C2S::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__FleCS__C2S_ids, __FleCS__C2S_ids + 2, _s);
}

::std::vector< ::std::string>
FleCS::C2S::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__FleCS__C2S_ids[0], &__FleCS__C2S_ids[2]);
}

const ::std::string&
FleCS::C2S::ice_id(const ::Ice::Current&) const
{
    return __FleCS__C2S_ids[0];
}

const ::std::string&
FleCS::C2S::ice_staticId()
{
    return __FleCS__C2S_ids[0];
}

::Ice::DispatchStatus
FleCS::C2S::___Get(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string bucketID;
    ::std::string objID;
    __is->read(bucketID);
    __is->read(objID);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::FleCS::ByteSeq content;
    Get(bucketID, objID, content, __current);
    if(content.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&content[0], &content[0] + content.size());
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FleCS::C2S::___Put(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string bucketID;
    ::std::string objID;
    ::FleCS::ByteSeq content;
    __is->read(bucketID);
    __is->read(objID);
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___content;
    __is->read(___content);
    ::std::vector< ::Ice::Byte>(___content.first, ___content.second).swap(content);
    __is->endReadEncaps();
    Put(bucketID, objID, content, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FleCS::C2S::___Append(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string bucketID;
    ::std::string objID;
    ::FleCS::ByteSeq content;
    __is->read(bucketID);
    __is->read(objID);
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___content;
    __is->read(___content);
    ::std::vector< ::Ice::Byte>(___content.first, ___content.second).swap(content);
    __is->endReadEncaps();
    Append(bucketID, objID, content, __current);
    return ::Ice::DispatchOK;
}

static ::std::string __FleCS__C2S_all[] =
{
    "Append",
    "Get",
    "Put",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
FleCS::C2S::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__FleCS__C2S_all, __FleCS__C2S_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __FleCS__C2S_all)
    {
        case 0:
        {
            return ___Append(in, current);
        }
        case 1:
        {
            return ___Get(in, current);
        }
        case 2:
        {
            return ___Put(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
FleCS::C2S::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
FleCS::C2S::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
FleCS::C2S::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type FleCS::C2S was not generated with stream support";
    throw ex;
}

void
FleCS::C2S::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type FleCS::C2S was not generated with stream support";
    throw ex;
}
#endif

void 
FleCS::__patch__C2SPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::FleCS::C2SPtr* p = static_cast< ::FleCS::C2SPtr*>(__addr);
    assert(p);
    *p = ::FleCS::C2SPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::FleCS::C2S::ice_staticId(), v->ice_id());
    }
}

::Ice::ObjectPtr
FleCS::SM2S::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __FleCS__SM2S_ids[2] =
{
    "::FleCS::SM2S",
    "::Ice::Object"
};

bool
FleCS::SM2S::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__FleCS__SM2S_ids, __FleCS__SM2S_ids + 2, _s);
}

::std::vector< ::std::string>
FleCS::SM2S::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__FleCS__SM2S_ids[0], &__FleCS__SM2S_ids[2]);
}

const ::std::string&
FleCS::SM2S::ice_id(const ::Ice::Current&) const
{
    return __FleCS__SM2S_ids[0];
}

const ::std::string&
FleCS::SM2S::ice_staticId()
{
    return __FleCS__SM2S_ids[0];
}

::Ice::DispatchStatus
FleCS::SM2S::___Get(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string bucketID;
    ::std::string objID;
    __is->read(bucketID);
    __is->read(objID);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::FleCS::ByteSeq content;
    Get(bucketID, objID, content, __current);
    if(content.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&content[0], &content[0] + content.size());
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FleCS::SM2S::___Put(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string bucketID;
    ::std::string objID;
    ::FleCS::ByteSeq content;
    __is->read(bucketID);
    __is->read(objID);
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___content;
    __is->read(___content);
    ::std::vector< ::Ice::Byte>(___content.first, ___content.second).swap(content);
    __is->endReadEncaps();
    Put(bucketID, objID, content, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FleCS::SM2S::___Append(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string bucketID;
    ::std::string objID;
    ::FleCS::ByteSeq content;
    __is->read(bucketID);
    __is->read(objID);
    ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*> ___content;
    __is->read(___content);
    ::std::vector< ::Ice::Byte>(___content.first, ___content.second).swap(content);
    __is->endReadEncaps();
    Append(bucketID, objID, content, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FleCS::SM2S::___AcquireLock(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string lockPath;
    ::Ice::Byte type;
    ::std::string hostname;
    ::Ice::Long tid;
    __is->read(lockPath);
    __is->read(type);
    __is->read(hostname);
    __is->read(tid);
    __is->endReadEncaps();
    AcquireLock(lockPath, type, hostname, tid, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FleCS::SM2S::___ReleaseLock(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string lockPath;
    ::Ice::Byte type;
    ::std::string hostname;
    ::Ice::Long tid;
    __is->read(lockPath);
    __is->read(type);
    __is->read(hostname);
    __is->read(tid);
    __is->endReadEncaps();
    ReleaseLock(lockPath, type, hostname, tid, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FleCS::SM2S::___ServerJoined(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string endpoint;
    __is->read(endpoint);
    __is->endReadEncaps();
    ServerJoined(endpoint, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FleCS::SM2S::___ServerLeft(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string endpoint;
    __is->read(endpoint);
    __is->endReadEncaps();
    ServerLeft(endpoint, __current);
    return ::Ice::DispatchOK;
}

static ::std::string __FleCS__SM2S_all[] =
{
    "AcquireLock",
    "Append",
    "Get",
    "Put",
    "ReleaseLock",
    "ServerJoined",
    "ServerLeft",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
FleCS::SM2S::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__FleCS__SM2S_all, __FleCS__SM2S_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __FleCS__SM2S_all)
    {
        case 0:
        {
            return ___AcquireLock(in, current);
        }
        case 1:
        {
            return ___Append(in, current);
        }
        case 2:
        {
            return ___Get(in, current);
        }
        case 3:
        {
            return ___Put(in, current);
        }
        case 4:
        {
            return ___ReleaseLock(in, current);
        }
        case 5:
        {
            return ___ServerJoined(in, current);
        }
        case 6:
        {
            return ___ServerLeft(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
FleCS::SM2S::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
FleCS::SM2S::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
FleCS::SM2S::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type FleCS::SM2S was not generated with stream support";
    throw ex;
}

void
FleCS::SM2S::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type FleCS::SM2S was not generated with stream support";
    throw ex;
}
#endif

void 
FleCS::__patch__SM2SPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::FleCS::SM2SPtr* p = static_cast< ::FleCS::SM2SPtr*>(__addr);
    assert(p);
    *p = ::FleCS::SM2SPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::FleCS::SM2S::ice_staticId(), v->ice_id());
    }
}

::Ice::ObjectPtr
FleCS::Master::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __FleCS__Master_ids[2] =
{
    "::FleCS::Master",
    "::Ice::Object"
};

bool
FleCS::Master::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__FleCS__Master_ids, __FleCS__Master_ids + 2, _s);
}

::std::vector< ::std::string>
FleCS::Master::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__FleCS__Master_ids[0], &__FleCS__Master_ids[2]);
}

const ::std::string&
FleCS::Master::ice_id(const ::Ice::Current&) const
{
    return __FleCS__Master_ids[0];
}

const ::std::string&
FleCS::Master::ice_staticId()
{
    return __FleCS__Master_ids[0];
}

::Ice::DispatchStatus
FleCS::Master::___Join(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string endpoint;
    __is->read(endpoint);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::FleCS::StringSeq existingServers;
    Join(endpoint, existingServers, __current);
    if(existingServers.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&existingServers[0], &existingServers[0] + existingServers.size());
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
FleCS::Master::___GetLockServers(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::FleCS::StringSeq __ret = GetLockServers(__current);
    if(__ret.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&__ret[0], &__ret[0] + __ret.size());
    }
    return ::Ice::DispatchOK;
}

static ::std::string __FleCS__Master_all[] =
{
    "GetLockServers",
    "Join",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
FleCS::Master::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__FleCS__Master_all, __FleCS__Master_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __FleCS__Master_all)
    {
        case 0:
        {
            return ___GetLockServers(in, current);
        }
        case 1:
        {
            return ___Join(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
FleCS::Master::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
FleCS::Master::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
FleCS::Master::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type FleCS::Master was not generated with stream support";
    throw ex;
}

void
FleCS::Master::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type FleCS::Master was not generated with stream support";
    throw ex;
}
#endif

void 
FleCS::__patch__MasterPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::FleCS::MasterPtr* p = static_cast< ::FleCS::MasterPtr*>(__addr);
    assert(p);
    *p = ::FleCS::MasterPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::FleCS::Master::ice_staticId(), v->ice_id());
    }
}
